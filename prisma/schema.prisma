generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id               Int        @id @default(autoincrement())
  username         String     @unique
  first_name       String
  last_name        String
  email            String     @unique
  password         String
  phone            String
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  posts            Posts[]
  comments         PostComments[]
  goals            UserGoals[]
  Sender           Friends[]  @relation("Sender")
  Reciever         Friends[]  @relation("Reciever")
  PosterResources  Resources[] @relation("Poster")
  ReviewerResources Resources[] @relation("Reviewer")
}

model Topic{
  id         Int          @id @default(autoincrement())
  topic_name String @unique
  created_at DateTime     @default(now())
  post PostTopics[]
  resource ResourceTopics[]
}

model Posts{
  post_id         Int          @id @default(autoincrement())
  user_id    Int 
  user User @relation(fields: [user_id], references: [id])
  is_private Boolean
  title String
  content String
  topics PostTopics[]
  comments PostComments[]
  created_at DateTime     @default(now())
}

model PostTopics{
  id         Int          @id @default(autoincrement())
  post Posts @relation(fields: [post_id], references: [post_id])
  post_id Int
  topic Topic @relation(fields: [topic_id], references: [id])
  topic_id Int

}

model PostComments{
  comment_id Int @id @default(autoincrement())
  post Posts @relation(fields: [post_id], references: [post_id])
  post_id Int
  user User @relation(fields: [user_id], references: [id])
  user_id Int
  comment String
}

model Habits{
  habit_id Int @id @default(autoincrement())
  name String @unique
  description String
  created_at DateTime     @default(now())
  updated_at DateTime     @default(now())
  goals UserGoals[]
}

model Units{
  unit_id Int @id @default(autoincrement())
  name String @unique
  symbol String
  goals UserGoals[]
}

model UserGoals{
  goal_id Int @id @default(autoincrement())
  user User @relation(fields: [user_id], references: [id])
  user_id Int
  habit Habits @relation(fields: [habit_id], references: [habit_id])
  habit_id Int
  end_date String
  goal_amount String
  unit Units @relation(fields: [unit_id], references: [unit_id])
  unit_id Int
  time_period String
  created_at DateTime     @default(now())
  updated_at DateTime     @default(now())
}

model Friends {
  id               Int      @id @default(autoincrement())
  senderId        Int
  recieverId        Int
  invite           Boolean  @default(true)
  inviteAccepted   Boolean  @default(false)

  Sender         User     @relation("Sender", fields: [senderId], references: [id])
  Reciever          User     @relation("Reciever", fields: [recieverId], references: [id])

  @@unique([senderId, recieverId])
}

model Resources {
  resource_id  Int      @id @default(autoincrement())
  posterId     Int
  reviewerId   Int? 
  status       Boolean  @default(false)
  url          String
  name         String
  image_url    String   @default("")
  description  String
  Poster       User     @relation("Poster", fields: [posterId], references: [id])
  Receiver     User?     @relation("Reviewer", fields: [reviewerId], references: [id]) // Corrected spelling to Receiver
  topic        ResourceTopics[]
}

model ResourceTopics{
  id Int @id @default(autoincrement())
  resource_id Int
  topic_id Int

  topic Topic @relation(fields: [topic_id], references: [id])
  resource Resources @relation(fields: [resource_id], references: [resource_id])
}